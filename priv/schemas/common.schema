%% -*- mode: erlang; tab-width: 4; indent-tabs-mode: 1; st-rulers: [70] -*-
%% vim: ts=4 sw=4 ft=erlang noet

%% @doc where do you want the console.log output:
%% off : nowhere
%% file: the file specified by log.console.file
%% console : standard out
%% both : log.console.file and standard out.
{mapping, "log.console", "lager.handlers", [
	{default, {{console_log_default|default:'file'}} },
	{datatype, {enum, [off, file, console, both]}}
]}.

%% @doc the log level of the console log
{mapping, "log.console.level", "lager.handlers", [
	{default, info},
	{datatype, {enum, [debug, info, warning, error]}}
]}.

%% @doc location of the console log
{mapping, "log.console.file", "lager.handlers", [
	{default, "{{platform_log_dir}}/console.log"}
]}.

%% *gasp* notice the same @mapping!
%% @doc location of the error log
{mapping, "log.error.file", "lager.handlers", [
	{default, "{{platform_log_dir}}/error.log"}
]}.

%% @doc turn on colors
{mapping, "log.color", "lager.colored", [
	{default, on},
	{datatype, {enum, [on, off]}}
]}.

{translation, "lager.colored", fun(Config) ->
	case cuttlefish_util:conf_get_value("log.color", Config) of
		on ->
			true;
		off ->
			false;
		_Default ->
			true
	end
end}.

%% *gasp* notice the same @mapping!
%% @doc turn on syslog
{mapping, "log.syslog", "lager.handlers", [
	{default, off},
	{datatype, {enum, [on, off]}}
]}.

{translation, "lager.handlers", fun(Config) ->
	SyslogHandler = case cuttlefish_util:conf_get_value("log.syslog", Config) of
		on ->
			[{lager_syslog_backend, ["{{release_name}}", daemon, info]}];
		_ ->
			[]
	end,
	ErrorHandler = case cuttlefish_util:conf_get_value("log.error.file", Config) of
		undefined ->
			[];
		ErrorFilename ->
			[{lager_file_backend, [
				{file, ErrorFilename},
				{level, error},
				{size, 10485760},
				{date, "$D0"},
				{count, 5}
			]}]
	end,
	ConsoleLogLevel = cuttlefish_util:conf_get_value("log.console.level", Config),
	ConsoleLogFile = cuttlefish_util:conf_get_value("log.console.file", Config),
	ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
	ConsoleFileHandler = {lager_file_backend, [
		{file, ConsoleLogFile},
		{level, ConsoleLogLevel},
		{size, 10485760},
		{date, "$D0"},
		{count, 5}
	]},
	ConsoleHandlers = case cuttlefish_util:conf_get_value("log.console", Config) of
		off ->
			[];
		file ->
			[ConsoleFileHandler];
		console ->
			[ConsoleHandler];
		both ->
			[ConsoleHandler, ConsoleFileHandler];
		_ ->
			[]
	end,
	SyslogHandler ++ ConsoleHandlers ++ ErrorHandler
end}.

%% SASL 
%% We should never care about this
{mapping, "sasl", "sasl.sasl_error_logger", [
	{default, off},
	{datatype, {enum, [on, off]}},
	{level, advanced}
]}.

{translation, "sasl.sasl_error_logger", fun(Config) ->
	case cuttlefish_util:conf_get_value("sasl", Config) of
		on ->
			true;
		_ ->
			false
	end
end}.

%% Lager Config

%% @doc Whether to write a crash log, and where.
%% Commented/omitted/undefined means no crash logger.
{mapping, "log.crash.file", "lager.crash_log", [
	{default, "{{platform_log_dir}}/crash.log"}
]}.

%% @doc Maximum size in bytes of events in the crash log - defaults to 65536
%% @datatype integer
%% @mapping 
{mapping, "log.crash.msg_size", "lager.crash_log_msg_size", [
	{default, "64KB"},
	{datatype, bytesize}
]}.

%% @doc Maximum size of the crash log in bytes, before its rotated, set
%% to 0 to disable rotation - default is 0
{mapping, "log.crash.size", "lager.crash_log_size", [
	{default, "10MB"},
	{datatype, bytesize}
]}.

%% @doc What time to rotate the crash log - default is no time
%% rotation. See the lager README for a description of this format:
%% https://github.com/basho/lager/blob/master/README.org
{mapping, "log.crash.date", "lager.crash_log_date", [
	{default, "$D0"}
]}.

%% @doc Number of rotated crash logs to keep, 0 means keep only the
%% current one - default is 0
{mapping, "log.crash.count", "lager.crash_log_count", [
	{default, 5},
	{datatype, integer}
]}.

%% @doc Whether to redirect error_logger messages into lager - defaults to true
{mapping, "log.error.redirect", "lager.error_logger_redirect", [
	{default, on},
	{datatype, {enum, [on, off]}}
]}.

{translation, "lager.error_logger_redirect", fun(Config) ->
	case cuttlefish_util:conf_get_value("log.error.redirect", Config) of
		on ->
			true;
		off ->
			false;
		_Default ->
			true
	end
end}.

%% @doc maximum number of error_logger messages to handle in a second
%% lager 2.0.0 shipped with a limit of 50, which is a little low for erlang's startup
{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
	{default, 100},
	{datatype, integer}
]}.

%% @doc Cookie for distributed node communication.  All nodes in the same cluster
%% should use the same cookie or they will not be able to communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
	{default, "{{release_name}}"}
]}.
